; The following procedure is based off the exercise 7.6 from the Simply Scheme textbook
; It takes an argument of word and returns the NATO phonetic Alphabet version of it.

(define (words x)
(accumulate se (every singleletter? x)))

(define (singleletter? letter)     ; helper procedure that actually translates letters to words
     (cond ((equal? (first letter) 'a) 'Alpha)
           ((equal? (first letter) 'b) 'Bravo)
           ((equal? (first letter) 'c) 'Charlie)
           ((equal? (first letter) 'd) 'Delta)
           ((equal? (first letter) 'e) 'Echo)
           ((equal? (first letter) 'f) 'Foxtrot)
           ((equal? (first letter) 'g) 'Golf)
           ((equal? (first letter) 'h) 'Hotel)
           ((equal? (first letter) 'i) 'India)
           ((equal? (first letter) 'j) 'Juliett)
           ((equal? (first letter) 'k) 'Kilo)
           ((equal? (first letter) 'l) 'Lima)
           ((equal? (first letter) 'm) 'Mike)
           ((equal? (first letter) 'n) 'November)
           ((equal? (first letter) 'o) 'Oscar)
           ((equal? (first letter) 'p) 'Papa)
           ((equal? (first letter) 'q) 'Quebec)
           ((equal? (first letter) 'r) 'Romeo)
           ((equal? (first letter) 's) 'Sierra)
           ((equal? (first letter) 't) 'Tango)
           ((equal? (first letter) 'u) 'Uniform)
           ((equal? (first letter) 'v) 'Victor)
           ((equal? (first letter) 'w) 'Whiskey)
           ((equal? (first letter) 'x) 'Xray)
           ((equal? (first letter) 'y) 'yankee)
           ((equal? (first letter) 'z) 'Zulu)
           (else 'error)))
